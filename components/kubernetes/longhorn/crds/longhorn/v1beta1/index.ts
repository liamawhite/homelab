// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from '@pulumi/pulumi'
import * as utilities from '../../utilities'

// Export members:
export { BackingImageArgs } from './backingImage'
export type BackingImage = import('./backingImage').BackingImage
export const BackingImage: typeof import('./backingImage').BackingImage = null as any
utilities.lazyLoad(exports, ['BackingImage'], () => require('./backingImage'))

export { BackingImageDataSourceArgs } from './backingImageDataSource'
export type BackingImageDataSource = import('./backingImageDataSource').BackingImageDataSource
export const BackingImageDataSource: typeof import('./backingImageDataSource').BackingImageDataSource =
    null as any
utilities.lazyLoad(exports, ['BackingImageDataSource'], () => require('./backingImageDataSource'))

export { BackingImageDataSourceListArgs } from './backingImageDataSourceList'
export type BackingImageDataSourceList =
    import('./backingImageDataSourceList').BackingImageDataSourceList
export const BackingImageDataSourceList: typeof import('./backingImageDataSourceList').BackingImageDataSourceList =
    null as any
utilities.lazyLoad(exports, ['BackingImageDataSourceList'], () =>
    require('./backingImageDataSourceList'),
)

export { BackingImageDataSourcePatchArgs } from './backingImageDataSourcePatch'
export type BackingImageDataSourcePatch =
    import('./backingImageDataSourcePatch').BackingImageDataSourcePatch
export const BackingImageDataSourcePatch: typeof import('./backingImageDataSourcePatch').BackingImageDataSourcePatch =
    null as any
utilities.lazyLoad(exports, ['BackingImageDataSourcePatch'], () =>
    require('./backingImageDataSourcePatch'),
)

export { BackingImageListArgs } from './backingImageList'
export type BackingImageList = import('./backingImageList').BackingImageList
export const BackingImageList: typeof import('./backingImageList').BackingImageList = null as any
utilities.lazyLoad(exports, ['BackingImageList'], () => require('./backingImageList'))

export { BackingImageManagerArgs } from './backingImageManager'
export type BackingImageManager = import('./backingImageManager').BackingImageManager
export const BackingImageManager: typeof import('./backingImageManager').BackingImageManager =
    null as any
utilities.lazyLoad(exports, ['BackingImageManager'], () => require('./backingImageManager'))

export { BackingImageManagerListArgs } from './backingImageManagerList'
export type BackingImageManagerList = import('./backingImageManagerList').BackingImageManagerList
export const BackingImageManagerList: typeof import('./backingImageManagerList').BackingImageManagerList =
    null as any
utilities.lazyLoad(exports, ['BackingImageManagerList'], () => require('./backingImageManagerList'))

export { BackingImageManagerPatchArgs } from './backingImageManagerPatch'
export type BackingImageManagerPatch = import('./backingImageManagerPatch').BackingImageManagerPatch
export const BackingImageManagerPatch: typeof import('./backingImageManagerPatch').BackingImageManagerPatch =
    null as any
utilities.lazyLoad(exports, ['BackingImageManagerPatch'], () =>
    require('./backingImageManagerPatch'),
)

export { BackingImagePatchArgs } from './backingImagePatch'
export type BackingImagePatch = import('./backingImagePatch').BackingImagePatch
export const BackingImagePatch: typeof import('./backingImagePatch').BackingImagePatch = null as any
utilities.lazyLoad(exports, ['BackingImagePatch'], () => require('./backingImagePatch'))

export { BackupArgs } from './backup'
export type Backup = import('./backup').Backup
export const Backup: typeof import('./backup').Backup = null as any
utilities.lazyLoad(exports, ['Backup'], () => require('./backup'))

export { BackupListArgs } from './backupList'
export type BackupList = import('./backupList').BackupList
export const BackupList: typeof import('./backupList').BackupList = null as any
utilities.lazyLoad(exports, ['BackupList'], () => require('./backupList'))

export { BackupPatchArgs } from './backupPatch'
export type BackupPatch = import('./backupPatch').BackupPatch
export const BackupPatch: typeof import('./backupPatch').BackupPatch = null as any
utilities.lazyLoad(exports, ['BackupPatch'], () => require('./backupPatch'))

export { BackupTargetArgs } from './backupTarget'
export type BackupTarget = import('./backupTarget').BackupTarget
export const BackupTarget: typeof import('./backupTarget').BackupTarget = null as any
utilities.lazyLoad(exports, ['BackupTarget'], () => require('./backupTarget'))

export { BackupTargetListArgs } from './backupTargetList'
export type BackupTargetList = import('./backupTargetList').BackupTargetList
export const BackupTargetList: typeof import('./backupTargetList').BackupTargetList = null as any
utilities.lazyLoad(exports, ['BackupTargetList'], () => require('./backupTargetList'))

export { BackupTargetPatchArgs } from './backupTargetPatch'
export type BackupTargetPatch = import('./backupTargetPatch').BackupTargetPatch
export const BackupTargetPatch: typeof import('./backupTargetPatch').BackupTargetPatch = null as any
utilities.lazyLoad(exports, ['BackupTargetPatch'], () => require('./backupTargetPatch'))

export { BackupVolumeArgs } from './backupVolume'
export type BackupVolume = import('./backupVolume').BackupVolume
export const BackupVolume: typeof import('./backupVolume').BackupVolume = null as any
utilities.lazyLoad(exports, ['BackupVolume'], () => require('./backupVolume'))

export { BackupVolumeListArgs } from './backupVolumeList'
export type BackupVolumeList = import('./backupVolumeList').BackupVolumeList
export const BackupVolumeList: typeof import('./backupVolumeList').BackupVolumeList = null as any
utilities.lazyLoad(exports, ['BackupVolumeList'], () => require('./backupVolumeList'))

export { BackupVolumePatchArgs } from './backupVolumePatch'
export type BackupVolumePatch = import('./backupVolumePatch').BackupVolumePatch
export const BackupVolumePatch: typeof import('./backupVolumePatch').BackupVolumePatch = null as any
utilities.lazyLoad(exports, ['BackupVolumePatch'], () => require('./backupVolumePatch'))

export { EngineArgs } from './engine'
export type Engine = import('./engine').Engine
export const Engine: typeof import('./engine').Engine = null as any
utilities.lazyLoad(exports, ['Engine'], () => require('./engine'))

export { EngineImageArgs } from './engineImage'
export type EngineImage = import('./engineImage').EngineImage
export const EngineImage: typeof import('./engineImage').EngineImage = null as any
utilities.lazyLoad(exports, ['EngineImage'], () => require('./engineImage'))

export { EngineImageListArgs } from './engineImageList'
export type EngineImageList = import('./engineImageList').EngineImageList
export const EngineImageList: typeof import('./engineImageList').EngineImageList = null as any
utilities.lazyLoad(exports, ['EngineImageList'], () => require('./engineImageList'))

export { EngineImagePatchArgs } from './engineImagePatch'
export type EngineImagePatch = import('./engineImagePatch').EngineImagePatch
export const EngineImagePatch: typeof import('./engineImagePatch').EngineImagePatch = null as any
utilities.lazyLoad(exports, ['EngineImagePatch'], () => require('./engineImagePatch'))

export { EngineListArgs } from './engineList'
export type EngineList = import('./engineList').EngineList
export const EngineList: typeof import('./engineList').EngineList = null as any
utilities.lazyLoad(exports, ['EngineList'], () => require('./engineList'))

export { EnginePatchArgs } from './enginePatch'
export type EnginePatch = import('./enginePatch').EnginePatch
export const EnginePatch: typeof import('./enginePatch').EnginePatch = null as any
utilities.lazyLoad(exports, ['EnginePatch'], () => require('./enginePatch'))

export { InstanceManagerArgs } from './instanceManager'
export type InstanceManager = import('./instanceManager').InstanceManager
export const InstanceManager: typeof import('./instanceManager').InstanceManager = null as any
utilities.lazyLoad(exports, ['InstanceManager'], () => require('./instanceManager'))

export { InstanceManagerListArgs } from './instanceManagerList'
export type InstanceManagerList = import('./instanceManagerList').InstanceManagerList
export const InstanceManagerList: typeof import('./instanceManagerList').InstanceManagerList =
    null as any
utilities.lazyLoad(exports, ['InstanceManagerList'], () => require('./instanceManagerList'))

export { InstanceManagerPatchArgs } from './instanceManagerPatch'
export type InstanceManagerPatch = import('./instanceManagerPatch').InstanceManagerPatch
export const InstanceManagerPatch: typeof import('./instanceManagerPatch').InstanceManagerPatch =
    null as any
utilities.lazyLoad(exports, ['InstanceManagerPatch'], () => require('./instanceManagerPatch'))

export { NodeArgs } from './node'
export type Node = import('./node').Node
export const Node: typeof import('./node').Node = null as any
utilities.lazyLoad(exports, ['Node'], () => require('./node'))

export { NodeListArgs } from './nodeList'
export type NodeList = import('./nodeList').NodeList
export const NodeList: typeof import('./nodeList').NodeList = null as any
utilities.lazyLoad(exports, ['NodeList'], () => require('./nodeList'))

export { NodePatchArgs } from './nodePatch'
export type NodePatch = import('./nodePatch').NodePatch
export const NodePatch: typeof import('./nodePatch').NodePatch = null as any
utilities.lazyLoad(exports, ['NodePatch'], () => require('./nodePatch'))

export { RecurringJobArgs } from './recurringJob'
export type RecurringJob = import('./recurringJob').RecurringJob
export const RecurringJob: typeof import('./recurringJob').RecurringJob = null as any
utilities.lazyLoad(exports, ['RecurringJob'], () => require('./recurringJob'))

export { RecurringJobListArgs } from './recurringJobList'
export type RecurringJobList = import('./recurringJobList').RecurringJobList
export const RecurringJobList: typeof import('./recurringJobList').RecurringJobList = null as any
utilities.lazyLoad(exports, ['RecurringJobList'], () => require('./recurringJobList'))

export { RecurringJobPatchArgs } from './recurringJobPatch'
export type RecurringJobPatch = import('./recurringJobPatch').RecurringJobPatch
export const RecurringJobPatch: typeof import('./recurringJobPatch').RecurringJobPatch = null as any
utilities.lazyLoad(exports, ['RecurringJobPatch'], () => require('./recurringJobPatch'))

export { ReplicaArgs } from './replica'
export type Replica = import('./replica').Replica
export const Replica: typeof import('./replica').Replica = null as any
utilities.lazyLoad(exports, ['Replica'], () => require('./replica'))

export { ReplicaListArgs } from './replicaList'
export type ReplicaList = import('./replicaList').ReplicaList
export const ReplicaList: typeof import('./replicaList').ReplicaList = null as any
utilities.lazyLoad(exports, ['ReplicaList'], () => require('./replicaList'))

export { ReplicaPatchArgs } from './replicaPatch'
export type ReplicaPatch = import('./replicaPatch').ReplicaPatch
export const ReplicaPatch: typeof import('./replicaPatch').ReplicaPatch = null as any
utilities.lazyLoad(exports, ['ReplicaPatch'], () => require('./replicaPatch'))

export { SettingArgs } from './setting'
export type Setting = import('./setting').Setting
export const Setting: typeof import('./setting').Setting = null as any
utilities.lazyLoad(exports, ['Setting'], () => require('./setting'))

export { SettingListArgs } from './settingList'
export type SettingList = import('./settingList').SettingList
export const SettingList: typeof import('./settingList').SettingList = null as any
utilities.lazyLoad(exports, ['SettingList'], () => require('./settingList'))

export { SettingPatchArgs } from './settingPatch'
export type SettingPatch = import('./settingPatch').SettingPatch
export const SettingPatch: typeof import('./settingPatch').SettingPatch = null as any
utilities.lazyLoad(exports, ['SettingPatch'], () => require('./settingPatch'))

export { ShareManagerArgs } from './shareManager'
export type ShareManager = import('./shareManager').ShareManager
export const ShareManager: typeof import('./shareManager').ShareManager = null as any
utilities.lazyLoad(exports, ['ShareManager'], () => require('./shareManager'))

export { ShareManagerListArgs } from './shareManagerList'
export type ShareManagerList = import('./shareManagerList').ShareManagerList
export const ShareManagerList: typeof import('./shareManagerList').ShareManagerList = null as any
utilities.lazyLoad(exports, ['ShareManagerList'], () => require('./shareManagerList'))

export { ShareManagerPatchArgs } from './shareManagerPatch'
export type ShareManagerPatch = import('./shareManagerPatch').ShareManagerPatch
export const ShareManagerPatch: typeof import('./shareManagerPatch').ShareManagerPatch = null as any
utilities.lazyLoad(exports, ['ShareManagerPatch'], () => require('./shareManagerPatch'))

export { VolumeArgs } from './volume'
export type Volume = import('./volume').Volume
export const Volume: typeof import('./volume').Volume = null as any
utilities.lazyLoad(exports, ['Volume'], () => require('./volume'))

export { VolumeListArgs } from './volumeList'
export type VolumeList = import('./volumeList').VolumeList
export const VolumeList: typeof import('./volumeList').VolumeList = null as any
utilities.lazyLoad(exports, ['VolumeList'], () => require('./volumeList'))

export { VolumePatchArgs } from './volumePatch'
export type VolumePatch = import('./volumePatch').VolumePatch
export const VolumePatch: typeof import('./volumePatch').VolumePatch = null as any
utilities.lazyLoad(exports, ['VolumePatch'], () => require('./volumePatch'))

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case 'kubernetes:longhorn.io/v1beta1:BackingImage':
                return new BackingImage(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageDataSource':
                return new BackingImageDataSource(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageDataSourceList':
                return new BackingImageDataSourceList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageDataSourcePatch':
                return new BackingImageDataSourcePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageList':
                return new BackingImageList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageManager':
                return new BackingImageManager(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageManagerList':
                return new BackingImageManagerList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImageManagerPatch':
                return new BackingImageManagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackingImagePatch':
                return new BackingImagePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:Backup':
                return new Backup(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupList':
                return new BackupList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupPatch':
                return new BackupPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupTarget':
                return new BackupTarget(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupTargetList':
                return new BackupTargetList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupTargetPatch':
                return new BackupTargetPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupVolume':
                return new BackupVolume(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupVolumeList':
                return new BackupVolumeList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:BackupVolumePatch':
                return new BackupVolumePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:Engine':
                return new Engine(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:EngineImage':
                return new EngineImage(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:EngineImageList':
                return new EngineImageList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:EngineImagePatch':
                return new EngineImagePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:EngineList':
                return new EngineList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:EnginePatch':
                return new EnginePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:InstanceManager':
                return new InstanceManager(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:InstanceManagerList':
                return new InstanceManagerList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:InstanceManagerPatch':
                return new InstanceManagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:Node':
                return new Node(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:NodeList':
                return new NodeList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:NodePatch':
                return new NodePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:RecurringJob':
                return new RecurringJob(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:RecurringJobList':
                return new RecurringJobList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:RecurringJobPatch':
                return new RecurringJobPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:Replica':
                return new Replica(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:ReplicaList':
                return new ReplicaList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:ReplicaPatch':
                return new ReplicaPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:Setting':
                return new Setting(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:SettingList':
                return new SettingList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:SettingPatch':
                return new SettingPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:ShareManager':
                return new ShareManager(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:ShareManagerList':
                return new ShareManagerList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:ShareManagerPatch':
                return new ShareManagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:Volume':
                return new Volume(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:VolumeList':
                return new VolumeList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta1:VolumePatch':
                return new VolumePatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`)
        }
    },
}
pulumi.runtime.registerResourceModule('crds', 'longhorn.io/v1beta1', _module)
