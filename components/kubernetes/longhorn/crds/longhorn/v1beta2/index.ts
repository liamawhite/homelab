// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from '@pulumi/pulumi'
import * as utilities from '../../utilities'

// Export members:
export { BackingImageArgs } from './backingImage'
export type BackingImage = import('./backingImage').BackingImage
export const BackingImage: typeof import('./backingImage').BackingImage = null as any
utilities.lazyLoad(exports, ['BackingImage'], () => require('./backingImage'))

export { BackingImageDataSourceArgs } from './backingImageDataSource'
export type BackingImageDataSource = import('./backingImageDataSource').BackingImageDataSource
export const BackingImageDataSource: typeof import('./backingImageDataSource').BackingImageDataSource =
    null as any
utilities.lazyLoad(exports, ['BackingImageDataSource'], () => require('./backingImageDataSource'))

export { BackingImageDataSourceListArgs } from './backingImageDataSourceList'
export type BackingImageDataSourceList =
    import('./backingImageDataSourceList').BackingImageDataSourceList
export const BackingImageDataSourceList: typeof import('./backingImageDataSourceList').BackingImageDataSourceList =
    null as any
utilities.lazyLoad(exports, ['BackingImageDataSourceList'], () =>
    require('./backingImageDataSourceList'),
)

export { BackingImageDataSourcePatchArgs } from './backingImageDataSourcePatch'
export type BackingImageDataSourcePatch =
    import('./backingImageDataSourcePatch').BackingImageDataSourcePatch
export const BackingImageDataSourcePatch: typeof import('./backingImageDataSourcePatch').BackingImageDataSourcePatch =
    null as any
utilities.lazyLoad(exports, ['BackingImageDataSourcePatch'], () =>
    require('./backingImageDataSourcePatch'),
)

export { BackingImageListArgs } from './backingImageList'
export type BackingImageList = import('./backingImageList').BackingImageList
export const BackingImageList: typeof import('./backingImageList').BackingImageList = null as any
utilities.lazyLoad(exports, ['BackingImageList'], () => require('./backingImageList'))

export { BackingImageManagerArgs } from './backingImageManager'
export type BackingImageManager = import('./backingImageManager').BackingImageManager
export const BackingImageManager: typeof import('./backingImageManager').BackingImageManager =
    null as any
utilities.lazyLoad(exports, ['BackingImageManager'], () => require('./backingImageManager'))

export { BackingImageManagerListArgs } from './backingImageManagerList'
export type BackingImageManagerList = import('./backingImageManagerList').BackingImageManagerList
export const BackingImageManagerList: typeof import('./backingImageManagerList').BackingImageManagerList =
    null as any
utilities.lazyLoad(exports, ['BackingImageManagerList'], () => require('./backingImageManagerList'))

export { BackingImageManagerPatchArgs } from './backingImageManagerPatch'
export type BackingImageManagerPatch = import('./backingImageManagerPatch').BackingImageManagerPatch
export const BackingImageManagerPatch: typeof import('./backingImageManagerPatch').BackingImageManagerPatch =
    null as any
utilities.lazyLoad(exports, ['BackingImageManagerPatch'], () =>
    require('./backingImageManagerPatch'),
)

export { BackingImagePatchArgs } from './backingImagePatch'
export type BackingImagePatch = import('./backingImagePatch').BackingImagePatch
export const BackingImagePatch: typeof import('./backingImagePatch').BackingImagePatch = null as any
utilities.lazyLoad(exports, ['BackingImagePatch'], () => require('./backingImagePatch'))

export { BackupArgs } from './backup'
export type Backup = import('./backup').Backup
export const Backup: typeof import('./backup').Backup = null as any
utilities.lazyLoad(exports, ['Backup'], () => require('./backup'))

export { BackupBackingImageArgs } from './backupBackingImage'
export type BackupBackingImage = import('./backupBackingImage').BackupBackingImage
export const BackupBackingImage: typeof import('./backupBackingImage').BackupBackingImage =
    null as any
utilities.lazyLoad(exports, ['BackupBackingImage'], () => require('./backupBackingImage'))

export { BackupBackingImageListArgs } from './backupBackingImageList'
export type BackupBackingImageList = import('./backupBackingImageList').BackupBackingImageList
export const BackupBackingImageList: typeof import('./backupBackingImageList').BackupBackingImageList =
    null as any
utilities.lazyLoad(exports, ['BackupBackingImageList'], () => require('./backupBackingImageList'))

export { BackupBackingImagePatchArgs } from './backupBackingImagePatch'
export type BackupBackingImagePatch = import('./backupBackingImagePatch').BackupBackingImagePatch
export const BackupBackingImagePatch: typeof import('./backupBackingImagePatch').BackupBackingImagePatch =
    null as any
utilities.lazyLoad(exports, ['BackupBackingImagePatch'], () => require('./backupBackingImagePatch'))

export { BackupListArgs } from './backupList'
export type BackupList = import('./backupList').BackupList
export const BackupList: typeof import('./backupList').BackupList = null as any
utilities.lazyLoad(exports, ['BackupList'], () => require('./backupList'))

export { BackupPatchArgs } from './backupPatch'
export type BackupPatch = import('./backupPatch').BackupPatch
export const BackupPatch: typeof import('./backupPatch').BackupPatch = null as any
utilities.lazyLoad(exports, ['BackupPatch'], () => require('./backupPatch'))

export { BackupTargetArgs } from './backupTarget'
export type BackupTarget = import('./backupTarget').BackupTarget
export const BackupTarget: typeof import('./backupTarget').BackupTarget = null as any
utilities.lazyLoad(exports, ['BackupTarget'], () => require('./backupTarget'))

export { BackupTargetListArgs } from './backupTargetList'
export type BackupTargetList = import('./backupTargetList').BackupTargetList
export const BackupTargetList: typeof import('./backupTargetList').BackupTargetList = null as any
utilities.lazyLoad(exports, ['BackupTargetList'], () => require('./backupTargetList'))

export { BackupTargetPatchArgs } from './backupTargetPatch'
export type BackupTargetPatch = import('./backupTargetPatch').BackupTargetPatch
export const BackupTargetPatch: typeof import('./backupTargetPatch').BackupTargetPatch = null as any
utilities.lazyLoad(exports, ['BackupTargetPatch'], () => require('./backupTargetPatch'))

export { BackupVolumeArgs } from './backupVolume'
export type BackupVolume = import('./backupVolume').BackupVolume
export const BackupVolume: typeof import('./backupVolume').BackupVolume = null as any
utilities.lazyLoad(exports, ['BackupVolume'], () => require('./backupVolume'))

export { BackupVolumeListArgs } from './backupVolumeList'
export type BackupVolumeList = import('./backupVolumeList').BackupVolumeList
export const BackupVolumeList: typeof import('./backupVolumeList').BackupVolumeList = null as any
utilities.lazyLoad(exports, ['BackupVolumeList'], () => require('./backupVolumeList'))

export { BackupVolumePatchArgs } from './backupVolumePatch'
export type BackupVolumePatch = import('./backupVolumePatch').BackupVolumePatch
export const BackupVolumePatch: typeof import('./backupVolumePatch').BackupVolumePatch = null as any
utilities.lazyLoad(exports, ['BackupVolumePatch'], () => require('./backupVolumePatch'))

export { EngineArgs } from './engine'
export type Engine = import('./engine').Engine
export const Engine: typeof import('./engine').Engine = null as any
utilities.lazyLoad(exports, ['Engine'], () => require('./engine'))

export { EngineImageArgs } from './engineImage'
export type EngineImage = import('./engineImage').EngineImage
export const EngineImage: typeof import('./engineImage').EngineImage = null as any
utilities.lazyLoad(exports, ['EngineImage'], () => require('./engineImage'))

export { EngineImageListArgs } from './engineImageList'
export type EngineImageList = import('./engineImageList').EngineImageList
export const EngineImageList: typeof import('./engineImageList').EngineImageList = null as any
utilities.lazyLoad(exports, ['EngineImageList'], () => require('./engineImageList'))

export { EngineImagePatchArgs } from './engineImagePatch'
export type EngineImagePatch = import('./engineImagePatch').EngineImagePatch
export const EngineImagePatch: typeof import('./engineImagePatch').EngineImagePatch = null as any
utilities.lazyLoad(exports, ['EngineImagePatch'], () => require('./engineImagePatch'))

export { EngineListArgs } from './engineList'
export type EngineList = import('./engineList').EngineList
export const EngineList: typeof import('./engineList').EngineList = null as any
utilities.lazyLoad(exports, ['EngineList'], () => require('./engineList'))

export { EnginePatchArgs } from './enginePatch'
export type EnginePatch = import('./enginePatch').EnginePatch
export const EnginePatch: typeof import('./enginePatch').EnginePatch = null as any
utilities.lazyLoad(exports, ['EnginePatch'], () => require('./enginePatch'))

export { InstanceManagerArgs } from './instanceManager'
export type InstanceManager = import('./instanceManager').InstanceManager
export const InstanceManager: typeof import('./instanceManager').InstanceManager = null as any
utilities.lazyLoad(exports, ['InstanceManager'], () => require('./instanceManager'))

export { InstanceManagerListArgs } from './instanceManagerList'
export type InstanceManagerList = import('./instanceManagerList').InstanceManagerList
export const InstanceManagerList: typeof import('./instanceManagerList').InstanceManagerList =
    null as any
utilities.lazyLoad(exports, ['InstanceManagerList'], () => require('./instanceManagerList'))

export { InstanceManagerPatchArgs } from './instanceManagerPatch'
export type InstanceManagerPatch = import('./instanceManagerPatch').InstanceManagerPatch
export const InstanceManagerPatch: typeof import('./instanceManagerPatch').InstanceManagerPatch =
    null as any
utilities.lazyLoad(exports, ['InstanceManagerPatch'], () => require('./instanceManagerPatch'))

export { NodeArgs } from './node'
export type Node = import('./node').Node
export const Node: typeof import('./node').Node = null as any
utilities.lazyLoad(exports, ['Node'], () => require('./node'))

export { NodeListArgs } from './nodeList'
export type NodeList = import('./nodeList').NodeList
export const NodeList: typeof import('./nodeList').NodeList = null as any
utilities.lazyLoad(exports, ['NodeList'], () => require('./nodeList'))

export { NodePatchArgs } from './nodePatch'
export type NodePatch = import('./nodePatch').NodePatch
export const NodePatch: typeof import('./nodePatch').NodePatch = null as any
utilities.lazyLoad(exports, ['NodePatch'], () => require('./nodePatch'))

export { OrphanArgs } from './orphan'
export type Orphan = import('./orphan').Orphan
export const Orphan: typeof import('./orphan').Orphan = null as any
utilities.lazyLoad(exports, ['Orphan'], () => require('./orphan'))

export { OrphanListArgs } from './orphanList'
export type OrphanList = import('./orphanList').OrphanList
export const OrphanList: typeof import('./orphanList').OrphanList = null as any
utilities.lazyLoad(exports, ['OrphanList'], () => require('./orphanList'))

export { OrphanPatchArgs } from './orphanPatch'
export type OrphanPatch = import('./orphanPatch').OrphanPatch
export const OrphanPatch: typeof import('./orphanPatch').OrphanPatch = null as any
utilities.lazyLoad(exports, ['OrphanPatch'], () => require('./orphanPatch'))

export { RecurringJobArgs } from './recurringJob'
export type RecurringJob = import('./recurringJob').RecurringJob
export const RecurringJob: typeof import('./recurringJob').RecurringJob = null as any
utilities.lazyLoad(exports, ['RecurringJob'], () => require('./recurringJob'))

export { RecurringJobListArgs } from './recurringJobList'
export type RecurringJobList = import('./recurringJobList').RecurringJobList
export const RecurringJobList: typeof import('./recurringJobList').RecurringJobList = null as any
utilities.lazyLoad(exports, ['RecurringJobList'], () => require('./recurringJobList'))

export { RecurringJobPatchArgs } from './recurringJobPatch'
export type RecurringJobPatch = import('./recurringJobPatch').RecurringJobPatch
export const RecurringJobPatch: typeof import('./recurringJobPatch').RecurringJobPatch = null as any
utilities.lazyLoad(exports, ['RecurringJobPatch'], () => require('./recurringJobPatch'))

export { ReplicaArgs } from './replica'
export type Replica = import('./replica').Replica
export const Replica: typeof import('./replica').Replica = null as any
utilities.lazyLoad(exports, ['Replica'], () => require('./replica'))

export { ReplicaListArgs } from './replicaList'
export type ReplicaList = import('./replicaList').ReplicaList
export const ReplicaList: typeof import('./replicaList').ReplicaList = null as any
utilities.lazyLoad(exports, ['ReplicaList'], () => require('./replicaList'))

export { ReplicaPatchArgs } from './replicaPatch'
export type ReplicaPatch = import('./replicaPatch').ReplicaPatch
export const ReplicaPatch: typeof import('./replicaPatch').ReplicaPatch = null as any
utilities.lazyLoad(exports, ['ReplicaPatch'], () => require('./replicaPatch'))

export { SettingArgs } from './setting'
export type Setting = import('./setting').Setting
export const Setting: typeof import('./setting').Setting = null as any
utilities.lazyLoad(exports, ['Setting'], () => require('./setting'))

export { SettingListArgs } from './settingList'
export type SettingList = import('./settingList').SettingList
export const SettingList: typeof import('./settingList').SettingList = null as any
utilities.lazyLoad(exports, ['SettingList'], () => require('./settingList'))

export { SettingPatchArgs } from './settingPatch'
export type SettingPatch = import('./settingPatch').SettingPatch
export const SettingPatch: typeof import('./settingPatch').SettingPatch = null as any
utilities.lazyLoad(exports, ['SettingPatch'], () => require('./settingPatch'))

export { ShareManagerArgs } from './shareManager'
export type ShareManager = import('./shareManager').ShareManager
export const ShareManager: typeof import('./shareManager').ShareManager = null as any
utilities.lazyLoad(exports, ['ShareManager'], () => require('./shareManager'))

export { ShareManagerListArgs } from './shareManagerList'
export type ShareManagerList = import('./shareManagerList').ShareManagerList
export const ShareManagerList: typeof import('./shareManagerList').ShareManagerList = null as any
utilities.lazyLoad(exports, ['ShareManagerList'], () => require('./shareManagerList'))

export { ShareManagerPatchArgs } from './shareManagerPatch'
export type ShareManagerPatch = import('./shareManagerPatch').ShareManagerPatch
export const ShareManagerPatch: typeof import('./shareManagerPatch').ShareManagerPatch = null as any
utilities.lazyLoad(exports, ['ShareManagerPatch'], () => require('./shareManagerPatch'))

export { SnapshotArgs } from './snapshot'
export type Snapshot = import('./snapshot').Snapshot
export const Snapshot: typeof import('./snapshot').Snapshot = null as any
utilities.lazyLoad(exports, ['Snapshot'], () => require('./snapshot'))

export { SnapshotListArgs } from './snapshotList'
export type SnapshotList = import('./snapshotList').SnapshotList
export const SnapshotList: typeof import('./snapshotList').SnapshotList = null as any
utilities.lazyLoad(exports, ['SnapshotList'], () => require('./snapshotList'))

export { SnapshotPatchArgs } from './snapshotPatch'
export type SnapshotPatch = import('./snapshotPatch').SnapshotPatch
export const SnapshotPatch: typeof import('./snapshotPatch').SnapshotPatch = null as any
utilities.lazyLoad(exports, ['SnapshotPatch'], () => require('./snapshotPatch'))

export { SupportBundleArgs } from './supportBundle'
export type SupportBundle = import('./supportBundle').SupportBundle
export const SupportBundle: typeof import('./supportBundle').SupportBundle = null as any
utilities.lazyLoad(exports, ['SupportBundle'], () => require('./supportBundle'))

export { SupportBundleListArgs } from './supportBundleList'
export type SupportBundleList = import('./supportBundleList').SupportBundleList
export const SupportBundleList: typeof import('./supportBundleList').SupportBundleList = null as any
utilities.lazyLoad(exports, ['SupportBundleList'], () => require('./supportBundleList'))

export { SupportBundlePatchArgs } from './supportBundlePatch'
export type SupportBundlePatch = import('./supportBundlePatch').SupportBundlePatch
export const SupportBundlePatch: typeof import('./supportBundlePatch').SupportBundlePatch =
    null as any
utilities.lazyLoad(exports, ['SupportBundlePatch'], () => require('./supportBundlePatch'))

export { SystemBackupArgs } from './systemBackup'
export type SystemBackup = import('./systemBackup').SystemBackup
export const SystemBackup: typeof import('./systemBackup').SystemBackup = null as any
utilities.lazyLoad(exports, ['SystemBackup'], () => require('./systemBackup'))

export { SystemBackupListArgs } from './systemBackupList'
export type SystemBackupList = import('./systemBackupList').SystemBackupList
export const SystemBackupList: typeof import('./systemBackupList').SystemBackupList = null as any
utilities.lazyLoad(exports, ['SystemBackupList'], () => require('./systemBackupList'))

export { SystemBackupPatchArgs } from './systemBackupPatch'
export type SystemBackupPatch = import('./systemBackupPatch').SystemBackupPatch
export const SystemBackupPatch: typeof import('./systemBackupPatch').SystemBackupPatch = null as any
utilities.lazyLoad(exports, ['SystemBackupPatch'], () => require('./systemBackupPatch'))

export { SystemRestoreArgs } from './systemRestore'
export type SystemRestore = import('./systemRestore').SystemRestore
export const SystemRestore: typeof import('./systemRestore').SystemRestore = null as any
utilities.lazyLoad(exports, ['SystemRestore'], () => require('./systemRestore'))

export { SystemRestoreListArgs } from './systemRestoreList'
export type SystemRestoreList = import('./systemRestoreList').SystemRestoreList
export const SystemRestoreList: typeof import('./systemRestoreList').SystemRestoreList = null as any
utilities.lazyLoad(exports, ['SystemRestoreList'], () => require('./systemRestoreList'))

export { SystemRestorePatchArgs } from './systemRestorePatch'
export type SystemRestorePatch = import('./systemRestorePatch').SystemRestorePatch
export const SystemRestorePatch: typeof import('./systemRestorePatch').SystemRestorePatch =
    null as any
utilities.lazyLoad(exports, ['SystemRestorePatch'], () => require('./systemRestorePatch'))

export { VolumeArgs } from './volume'
export type Volume = import('./volume').Volume
export const Volume: typeof import('./volume').Volume = null as any
utilities.lazyLoad(exports, ['Volume'], () => require('./volume'))

export { VolumeAttachmentArgs } from './volumeAttachment'
export type VolumeAttachment = import('./volumeAttachment').VolumeAttachment
export const VolumeAttachment: typeof import('./volumeAttachment').VolumeAttachment = null as any
utilities.lazyLoad(exports, ['VolumeAttachment'], () => require('./volumeAttachment'))

export { VolumeAttachmentListArgs } from './volumeAttachmentList'
export type VolumeAttachmentList = import('./volumeAttachmentList').VolumeAttachmentList
export const VolumeAttachmentList: typeof import('./volumeAttachmentList').VolumeAttachmentList =
    null as any
utilities.lazyLoad(exports, ['VolumeAttachmentList'], () => require('./volumeAttachmentList'))

export { VolumeAttachmentPatchArgs } from './volumeAttachmentPatch'
export type VolumeAttachmentPatch = import('./volumeAttachmentPatch').VolumeAttachmentPatch
export const VolumeAttachmentPatch: typeof import('./volumeAttachmentPatch').VolumeAttachmentPatch =
    null as any
utilities.lazyLoad(exports, ['VolumeAttachmentPatch'], () => require('./volumeAttachmentPatch'))

export { VolumeListArgs } from './volumeList'
export type VolumeList = import('./volumeList').VolumeList
export const VolumeList: typeof import('./volumeList').VolumeList = null as any
utilities.lazyLoad(exports, ['VolumeList'], () => require('./volumeList'))

export { VolumePatchArgs } from './volumePatch'
export type VolumePatch = import('./volumePatch').VolumePatch
export const VolumePatch: typeof import('./volumePatch').VolumePatch = null as any
utilities.lazyLoad(exports, ['VolumePatch'], () => require('./volumePatch'))

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case 'kubernetes:longhorn.io/v1beta2:BackingImage':
                return new BackingImage(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageDataSource':
                return new BackingImageDataSource(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageDataSourceList':
                return new BackingImageDataSourceList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageDataSourcePatch':
                return new BackingImageDataSourcePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageList':
                return new BackingImageList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageManager':
                return new BackingImageManager(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageManagerList':
                return new BackingImageManagerList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImageManagerPatch':
                return new BackingImageManagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackingImagePatch':
                return new BackingImagePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Backup':
                return new Backup(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupBackingImage':
                return new BackupBackingImage(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupBackingImageList':
                return new BackupBackingImageList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupBackingImagePatch':
                return new BackupBackingImagePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupList':
                return new BackupList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupPatch':
                return new BackupPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupTarget':
                return new BackupTarget(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupTargetList':
                return new BackupTargetList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupTargetPatch':
                return new BackupTargetPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupVolume':
                return new BackupVolume(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupVolumeList':
                return new BackupVolumeList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:BackupVolumePatch':
                return new BackupVolumePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Engine':
                return new Engine(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:EngineImage':
                return new EngineImage(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:EngineImageList':
                return new EngineImageList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:EngineImagePatch':
                return new EngineImagePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:EngineList':
                return new EngineList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:EnginePatch':
                return new EnginePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:InstanceManager':
                return new InstanceManager(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:InstanceManagerList':
                return new InstanceManagerList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:InstanceManagerPatch':
                return new InstanceManagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Node':
                return new Node(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:NodeList':
                return new NodeList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:NodePatch':
                return new NodePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Orphan':
                return new Orphan(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:OrphanList':
                return new OrphanList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:OrphanPatch':
                return new OrphanPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:RecurringJob':
                return new RecurringJob(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:RecurringJobList':
                return new RecurringJobList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:RecurringJobPatch':
                return new RecurringJobPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Replica':
                return new Replica(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:ReplicaList':
                return new ReplicaList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:ReplicaPatch':
                return new ReplicaPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Setting':
                return new Setting(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SettingList':
                return new SettingList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SettingPatch':
                return new SettingPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:ShareManager':
                return new ShareManager(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:ShareManagerList':
                return new ShareManagerList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:ShareManagerPatch':
                return new ShareManagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Snapshot':
                return new Snapshot(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SnapshotList':
                return new SnapshotList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SnapshotPatch':
                return new SnapshotPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SupportBundle':
                return new SupportBundle(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SupportBundleList':
                return new SupportBundleList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SupportBundlePatch':
                return new SupportBundlePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SystemBackup':
                return new SystemBackup(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SystemBackupList':
                return new SystemBackupList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SystemBackupPatch':
                return new SystemBackupPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SystemRestore':
                return new SystemRestore(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SystemRestoreList':
                return new SystemRestoreList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:SystemRestorePatch':
                return new SystemRestorePatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:Volume':
                return new Volume(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:VolumeAttachment':
                return new VolumeAttachment(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:VolumeAttachmentList':
                return new VolumeAttachmentList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:VolumeAttachmentPatch':
                return new VolumeAttachmentPatch(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:VolumeList':
                return new VolumeList(name, <any>undefined, { urn })
            case 'kubernetes:longhorn.io/v1beta2:VolumePatch':
                return new VolumePatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`)
        }
    },
}
pulumi.runtime.registerResourceModule('crds', 'longhorn.io/v1beta2', _module)
