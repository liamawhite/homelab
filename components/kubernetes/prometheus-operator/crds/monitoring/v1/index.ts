// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from '@pulumi/pulumi'
import * as utilities from '../../utilities'

// Export members:
export { AlertmanagerArgs } from './alertmanager'
export type Alertmanager = import('./alertmanager').Alertmanager
export const Alertmanager: typeof import('./alertmanager').Alertmanager = null as any
utilities.lazyLoad(exports, ['Alertmanager'], () => require('./alertmanager'))

export { AlertmanagerListArgs } from './alertmanagerList'
export type AlertmanagerList = import('./alertmanagerList').AlertmanagerList
export const AlertmanagerList: typeof import('./alertmanagerList').AlertmanagerList = null as any
utilities.lazyLoad(exports, ['AlertmanagerList'], () => require('./alertmanagerList'))

export { AlertmanagerPatchArgs } from './alertmanagerPatch'
export type AlertmanagerPatch = import('./alertmanagerPatch').AlertmanagerPatch
export const AlertmanagerPatch: typeof import('./alertmanagerPatch').AlertmanagerPatch = null as any
utilities.lazyLoad(exports, ['AlertmanagerPatch'], () => require('./alertmanagerPatch'))

export { PodMonitorArgs } from './podMonitor'
export type PodMonitor = import('./podMonitor').PodMonitor
export const PodMonitor: typeof import('./podMonitor').PodMonitor = null as any
utilities.lazyLoad(exports, ['PodMonitor'], () => require('./podMonitor'))

export { PodMonitorListArgs } from './podMonitorList'
export type PodMonitorList = import('./podMonitorList').PodMonitorList
export const PodMonitorList: typeof import('./podMonitorList').PodMonitorList = null as any
utilities.lazyLoad(exports, ['PodMonitorList'], () => require('./podMonitorList'))

export { PodMonitorPatchArgs } from './podMonitorPatch'
export type PodMonitorPatch = import('./podMonitorPatch').PodMonitorPatch
export const PodMonitorPatch: typeof import('./podMonitorPatch').PodMonitorPatch = null as any
utilities.lazyLoad(exports, ['PodMonitorPatch'], () => require('./podMonitorPatch'))

export { ProbeArgs } from './probe'
export type Probe = import('./probe').Probe
export const Probe: typeof import('./probe').Probe = null as any
utilities.lazyLoad(exports, ['Probe'], () => require('./probe'))

export { ProbeListArgs } from './probeList'
export type ProbeList = import('./probeList').ProbeList
export const ProbeList: typeof import('./probeList').ProbeList = null as any
utilities.lazyLoad(exports, ['ProbeList'], () => require('./probeList'))

export { ProbePatchArgs } from './probePatch'
export type ProbePatch = import('./probePatch').ProbePatch
export const ProbePatch: typeof import('./probePatch').ProbePatch = null as any
utilities.lazyLoad(exports, ['ProbePatch'], () => require('./probePatch'))

export { PrometheusArgs } from './prometheus'
export type Prometheus = import('./prometheus').Prometheus
export const Prometheus: typeof import('./prometheus').Prometheus = null as any
utilities.lazyLoad(exports, ['Prometheus'], () => require('./prometheus'))

export { PrometheusListArgs } from './prometheusList'
export type PrometheusList = import('./prometheusList').PrometheusList
export const PrometheusList: typeof import('./prometheusList').PrometheusList = null as any
utilities.lazyLoad(exports, ['PrometheusList'], () => require('./prometheusList'))

export { PrometheusPatchArgs } from './prometheusPatch'
export type PrometheusPatch = import('./prometheusPatch').PrometheusPatch
export const PrometheusPatch: typeof import('./prometheusPatch').PrometheusPatch = null as any
utilities.lazyLoad(exports, ['PrometheusPatch'], () => require('./prometheusPatch'))

export { PrometheusRuleArgs } from './prometheusRule'
export type PrometheusRule = import('./prometheusRule').PrometheusRule
export const PrometheusRule: typeof import('./prometheusRule').PrometheusRule = null as any
utilities.lazyLoad(exports, ['PrometheusRule'], () => require('./prometheusRule'))

export { PrometheusRuleListArgs } from './prometheusRuleList'
export type PrometheusRuleList = import('./prometheusRuleList').PrometheusRuleList
export const PrometheusRuleList: typeof import('./prometheusRuleList').PrometheusRuleList =
    null as any
utilities.lazyLoad(exports, ['PrometheusRuleList'], () => require('./prometheusRuleList'))

export { PrometheusRulePatchArgs } from './prometheusRulePatch'
export type PrometheusRulePatch = import('./prometheusRulePatch').PrometheusRulePatch
export const PrometheusRulePatch: typeof import('./prometheusRulePatch').PrometheusRulePatch =
    null as any
utilities.lazyLoad(exports, ['PrometheusRulePatch'], () => require('./prometheusRulePatch'))

export { ServiceMonitorArgs } from './serviceMonitor'
export type ServiceMonitor = import('./serviceMonitor').ServiceMonitor
export const ServiceMonitor: typeof import('./serviceMonitor').ServiceMonitor = null as any
utilities.lazyLoad(exports, ['ServiceMonitor'], () => require('./serviceMonitor'))

export { ServiceMonitorListArgs } from './serviceMonitorList'
export type ServiceMonitorList = import('./serviceMonitorList').ServiceMonitorList
export const ServiceMonitorList: typeof import('./serviceMonitorList').ServiceMonitorList =
    null as any
utilities.lazyLoad(exports, ['ServiceMonitorList'], () => require('./serviceMonitorList'))

export { ServiceMonitorPatchArgs } from './serviceMonitorPatch'
export type ServiceMonitorPatch = import('./serviceMonitorPatch').ServiceMonitorPatch
export const ServiceMonitorPatch: typeof import('./serviceMonitorPatch').ServiceMonitorPatch =
    null as any
utilities.lazyLoad(exports, ['ServiceMonitorPatch'], () => require('./serviceMonitorPatch'))

export { ThanosRulerArgs } from './thanosRuler'
export type ThanosRuler = import('./thanosRuler').ThanosRuler
export const ThanosRuler: typeof import('./thanosRuler').ThanosRuler = null as any
utilities.lazyLoad(exports, ['ThanosRuler'], () => require('./thanosRuler'))

export { ThanosRulerListArgs } from './thanosRulerList'
export type ThanosRulerList = import('./thanosRulerList').ThanosRulerList
export const ThanosRulerList: typeof import('./thanosRulerList').ThanosRulerList = null as any
utilities.lazyLoad(exports, ['ThanosRulerList'], () => require('./thanosRulerList'))

export { ThanosRulerPatchArgs } from './thanosRulerPatch'
export type ThanosRulerPatch = import('./thanosRulerPatch').ThanosRulerPatch
export const ThanosRulerPatch: typeof import('./thanosRulerPatch').ThanosRulerPatch = null as any
utilities.lazyLoad(exports, ['ThanosRulerPatch'], () => require('./thanosRulerPatch'))

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case 'kubernetes:monitoring.coreos.com/v1:Alertmanager':
                return new Alertmanager(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:AlertmanagerList':
                return new AlertmanagerList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:AlertmanagerPatch':
                return new AlertmanagerPatch(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PodMonitor':
                return new PodMonitor(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PodMonitorList':
                return new PodMonitorList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PodMonitorPatch':
                return new PodMonitorPatch(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:Probe':
                return new Probe(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ProbeList':
                return new ProbeList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ProbePatch':
                return new ProbePatch(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:Prometheus':
                return new Prometheus(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PrometheusList':
                return new PrometheusList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PrometheusPatch':
                return new PrometheusPatch(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PrometheusRule':
                return new PrometheusRule(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PrometheusRuleList':
                return new PrometheusRuleList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:PrometheusRulePatch':
                return new PrometheusRulePatch(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ServiceMonitor':
                return new ServiceMonitor(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ServiceMonitorList':
                return new ServiceMonitorList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ServiceMonitorPatch':
                return new ServiceMonitorPatch(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ThanosRuler':
                return new ThanosRuler(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ThanosRulerList':
                return new ThanosRulerList(name, <any>undefined, { urn })
            case 'kubernetes:monitoring.coreos.com/v1:ThanosRulerPatch':
                return new ThanosRulerPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`)
        }
    },
}
pulumi.runtime.registerResourceModule('crds', 'monitoring.coreos.com/v1', _module)
