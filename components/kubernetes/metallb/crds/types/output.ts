// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from '@pulumi/pulumi'
import * as inputs from '../types/input'
import * as outputs from '../types/output'

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: { [key: string]: string }
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[]
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: { [key: string]: string }
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntry[]
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReference[]
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: { [key: string]: string }
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[]
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: { [key: string]: string }
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntryPatch[]
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReferencePatch[]
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: string
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion: string
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string
        }
    }
}

export namespace metallb {
    export namespace v1beta1 {
        /**
         * BFDProfile represents the settings of the bfd session that can be
         * optionally associated with a BGP session.
         */
        export interface BFDProfile {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'BFDProfile'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta1.BFDProfileSpec
            /**
             * BFDProfileStatus defines the observed state of BFDProfile.
             */
            status: { [key: string]: string }
        }

        /**
         * BFDProfileSpec defines the desired state of BFDProfile.
         */
        export interface BFDProfileSpec {
            /**
             * Configures the detection multiplier to determine
             * packet loss. The remote transmission interval will be multiplied
             * by this value to determine the connection loss detection timer.
             */
            detectMultiplier: number
            /**
             * Configures the minimal echo receive transmission
             * interval that this system is capable of handling in milliseconds.
             * Defaults to 50ms
             */
            echoInterval: number
            /**
             * Enables or disables the echo transmission mode.
             * This mode is disabled by default, and not supported on multi
             * hops setups.
             */
            echoMode: boolean
            /**
             * For multi hop sessions only: configure the minimum
             * expected TTL for an incoming BFD control packet.
             */
            minimumTtl: number
            /**
             * Mark session as passive: a passive session will not
             * attempt to start the connection and will wait for control packets
             * from peer before it begins replying.
             */
            passiveMode: boolean
            /**
             * The minimum interval that this system is capable of
             * receiving control packets in milliseconds.
             * Defaults to 300ms.
             */
            receiveInterval: number
            /**
             * The minimum transmission interval (less jitter)
             * that this system wants to use to send BFD control packets in
             * milliseconds. Defaults to 300ms
             */
            transmitInterval: number
        }

        /**
         * BFDProfileSpec defines the desired state of BFDProfile.
         */
        export interface BFDProfileSpecPatch {
            /**
             * Configures the detection multiplier to determine
             * packet loss. The remote transmission interval will be multiplied
             * by this value to determine the connection loss detection timer.
             */
            detectMultiplier: number
            /**
             * Configures the minimal echo receive transmission
             * interval that this system is capable of handling in milliseconds.
             * Defaults to 50ms
             */
            echoInterval: number
            /**
             * Enables or disables the echo transmission mode.
             * This mode is disabled by default, and not supported on multi
             * hops setups.
             */
            echoMode: boolean
            /**
             * For multi hop sessions only: configure the minimum
             * expected TTL for an incoming BFD control packet.
             */
            minimumTtl: number
            /**
             * Mark session as passive: a passive session will not
             * attempt to start the connection and will wait for control packets
             * from peer before it begins replying.
             */
            passiveMode: boolean
            /**
             * The minimum interval that this system is capable of
             * receiving control packets in milliseconds.
             * Defaults to 300ms.
             */
            receiveInterval: number
            /**
             * The minimum transmission interval (less jitter)
             * that this system wants to use to send BFD control packets in
             * milliseconds. Defaults to 300ms
             */
            transmitInterval: number
        }

        /**
         * BGPAdvertisement allows to advertise the IPs coming
         * from the selected IPAddressPools via BGP, setting the parameters of the
         * BGP Advertisement.
         */
        export interface BGPAdvertisement {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'BGPAdvertisement'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta1.BGPAdvertisementSpec
            /**
             * BGPAdvertisementStatus defines the observed state of BGPAdvertisement.
             */
            status: { [key: string]: string }
        }

        /**
         * BGPAdvertisementSpec defines the desired state of BGPAdvertisement.
         */
        export interface BGPAdvertisementSpec {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.
             */
            aggregationLength: number
            /**
             * The aggregation-length advertisement option lets you “roll up” the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.
             */
            aggregationLengthV6: number
            /**
             * The BGP communities to be associated with the announcement. Each item can be a standard community of the
             * form 1234:1234, a large community of the form large:1234:1234:1234 or the name of an alias defined in the
             * Community CRD.
             */
            communities: string[]
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement.
             * If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors: outputs.metallb.v1beta1.BGPAdvertisementSpecIpAddressPoolSelectors[]
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools: string[]
            /**
             * The BGP LOCAL_PREF attribute which is used by BGP best path algorithm,
             * Path with higher localpref is preferred over one with lower localpref.
             */
            localPref: number
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors: outputs.metallb.v1beta1.BGPAdvertisementSpecNodeSelectors[]
            /**
             * Peers limits the bgppeer to advertise the ips of the selected pools to.
             * When empty, the loadbalancer IP is announced to all the BGPPeers configured.
             */
            peers: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface BGPAdvertisementSpecIpAddressPoolSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.BGPAdvertisementSpecIpAddressPoolSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BGPAdvertisementSpecIpAddressPoolSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BGPAdvertisementSpecIpAddressPoolSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface BGPAdvertisementSpecIpAddressPoolSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.BGPAdvertisementSpecIpAddressPoolSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface BGPAdvertisementSpecNodeSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.BGPAdvertisementSpecNodeSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BGPAdvertisementSpecNodeSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BGPAdvertisementSpecNodeSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface BGPAdvertisementSpecNodeSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.BGPAdvertisementSpecNodeSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * BGPAdvertisementSpec defines the desired state of BGPAdvertisement.
         */
        export interface BGPAdvertisementSpecPatch {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.
             */
            aggregationLength: number
            /**
             * The aggregation-length advertisement option lets you “roll up” the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.
             */
            aggregationLengthV6: number
            /**
             * The BGP communities to be associated with the announcement. Each item can be a standard community of the
             * form 1234:1234, a large community of the form large:1234:1234:1234 or the name of an alias defined in the
             * Community CRD.
             */
            communities: string[]
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement.
             * If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors: outputs.metallb.v1beta1.BGPAdvertisementSpecIpAddressPoolSelectorsPatch[]
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools: string[]
            /**
             * The BGP LOCAL_PREF attribute which is used by BGP best path algorithm,
             * Path with higher localpref is preferred over one with lower localpref.
             */
            localPref: number
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors: outputs.metallb.v1beta1.BGPAdvertisementSpecNodeSelectorsPatch[]
            /**
             * Peers limits the bgppeer to advertise the ips of the selected pools to.
             * When empty, the loadbalancer IP is announced to all the BGPPeers configured.
             */
            peers: string[]
        }

        /**
         * BGPPeer is the Schema for the peers API.
         */
        export interface BGPPeer {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'BGPPeer'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta1.BGPPeerSpec
            /**
             * BGPPeerStatus defines the observed state of Peer.
             */
            status: { [key: string]: string }
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpec {
            bfdProfile: string
            /**
             * EBGP peer is multi-hops away
             */
            ebgpMultiHop: boolean
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime: string
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime: string
            /**
             * AS number to use for the local end of the session.
             */
            myASN: number
            /**
             * Only connect to this peer on nodes that match one of these
             * selectors.
             */
            nodeSelectors: outputs.metallb.v1beta1.BGPPeerSpecNodeSelectors[]
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password: string
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: number
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: string
            /**
             * Port to dial when establishing the session.
             */
            peerPort: number
            /**
             * BGP router ID to advertise to the peer
             */
            routerID: string
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress: string
        }

        export interface BGPPeerSpecNodeSelectors {
            matchExpressions: outputs.metallb.v1beta1.BGPPeerSpecNodeSelectorsMatchExpressions[]
            matchLabels: { [key: string]: string }
        }

        export interface BGPPeerSpecNodeSelectorsMatchExpressions {
            key: string
            operator: string
            values: string[]
        }

        export interface BGPPeerSpecNodeSelectorsMatchExpressionsPatch {
            key: string
            operator: string
            values: string[]
        }

        export interface BGPPeerSpecNodeSelectorsPatch {
            matchExpressions: outputs.metallb.v1beta1.BGPPeerSpecNodeSelectorsMatchExpressionsPatch[]
            matchLabels: { [key: string]: string }
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpecPatch {
            bfdProfile: string
            /**
             * EBGP peer is multi-hops away
             */
            ebgpMultiHop: boolean
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime: string
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime: string
            /**
             * AS number to use for the local end of the session.
             */
            myASN: number
            /**
             * Only connect to this peer on nodes that match one of these
             * selectors.
             */
            nodeSelectors: outputs.metallb.v1beta1.BGPPeerSpecNodeSelectorsPatch[]
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password: string
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: number
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: string
            /**
             * Port to dial when establishing the session.
             */
            peerPort: number
            /**
             * BGP router ID to advertise to the peer
             */
            routerID: string
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress: string
        }

        /**
         * Community is a collection of aliases for communities.
         * Users can define named aliases to be used in the BGPPeer CRD.
         */
        export interface Community {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'Community'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta1.CommunitySpec
            /**
             * CommunityStatus defines the observed state of Community.
             */
            status: { [key: string]: string }
        }

        /**
         * CommunitySpec defines the desired state of Community.
         */
        export interface CommunitySpec {
            communities: outputs.metallb.v1beta1.CommunitySpecCommunities[]
        }

        export interface CommunitySpecCommunities {
            /**
             * The name of the alias for the community.
             */
            name: string
            /**
             * The BGP community value corresponding to the given name. Can be a standard community of the form 1234:1234
             * or a large community of the form large:1234:1234:1234.
             */
            value: string
        }

        export interface CommunitySpecCommunitiesPatch {
            /**
             * The name of the alias for the community.
             */
            name: string
            /**
             * The BGP community value corresponding to the given name. Can be a standard community of the form 1234:1234
             * or a large community of the form large:1234:1234:1234.
             */
            value: string
        }

        /**
         * CommunitySpec defines the desired state of Community.
         */
        export interface CommunitySpecPatch {
            communities: outputs.metallb.v1beta1.CommunitySpecCommunitiesPatch[]
        }

        /**
         * IPAddressPool represents a pool of IP addresses that can be allocated
         * to LoadBalancer services.
         */
        export interface IPAddressPool {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'IPAddressPool'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta1.IPAddressPoolSpec
            status: outputs.metallb.v1beta1.IPAddressPoolStatus
        }

        /**
         * IPAddressPoolSpec defines the desired state of IPAddressPool.
         */
        export interface IPAddressPoolSpec {
            /**
             * A list of IP address ranges over which MetalLB has authority.
             * You can list multiple ranges in a single pool, they will all share the
             * same settings. Each range can be either a CIDR prefix, or an explicit
             * start-end range of IPs.
             */
            addresses: string[]
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation
             * for a pool.
             */
            autoAssign: boolean
            /**
             * AvoidBuggyIPs prevents addresses ending with .0 and .255
             * to be used by a pool.
             */
            avoidBuggyIPs: boolean
            serviceAllocation: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocation
        }

        /**
         * IPAddressPoolSpec defines the desired state of IPAddressPool.
         */
        export interface IPAddressPoolSpecPatch {
            /**
             * A list of IP address ranges over which MetalLB has authority.
             * You can list multiple ranges in a single pool, they will all share the
             * same settings. Each range can be either a CIDR prefix, or an explicit
             * start-end range of IPs.
             */
            addresses: string[]
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation
             * for a pool.
             */
            autoAssign: boolean
            /**
             * AvoidBuggyIPs prevents addresses ending with .0 and .255
             * to be used by a pool.
             */
            avoidBuggyIPs: boolean
            serviceAllocation: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationPatch
        }

        /**
         * AllocateTo makes ip pool allocation to specific namespace and/or service.
         * The controller will use the pool with lowest value of priority in case of
         * multiple matches. A pool with no priority set will be used only if the
         * pools with priority can't be used. If multiple matching IPAddressPools are
         * available it will check for the availability of IPs sorting the matching
         * IPAddressPools by priority, starting from the highest to the lowest. If
         * multiple IPAddressPools have the same priority, choice will be random.
         */
        export interface IPAddressPoolSpecServiceAllocation {
            /**
             * NamespaceSelectors list of label selectors to select namespace(s) for ip pool,
             * an alternative to using namespace list.
             */
            namespaceSelectors: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationNamespaceSelectors[]
            /**
             * Namespaces list of namespace(s) on which ip pool can be attached.
             */
            namespaces: string[]
            /**
             * Priority priority given for ip pool while ip allocation on a service.
             */
            priority: number
            /**
             * ServiceSelectors list of label selector to select service(s) for which ip pool
             * can be used for ip allocation.
             */
            serviceSelectors: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationServiceSelectors[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface IPAddressPoolSpecServiceAllocationNamespaceSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationNamespaceSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IPAddressPoolSpecServiceAllocationNamespaceSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IPAddressPoolSpecServiceAllocationNamespaceSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface IPAddressPoolSpecServiceAllocationNamespaceSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationNamespaceSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * AllocateTo makes ip pool allocation to specific namespace and/or service.
         * The controller will use the pool with lowest value of priority in case of
         * multiple matches. A pool with no priority set will be used only if the
         * pools with priority can't be used. If multiple matching IPAddressPools are
         * available it will check for the availability of IPs sorting the matching
         * IPAddressPools by priority, starting from the highest to the lowest. If
         * multiple IPAddressPools have the same priority, choice will be random.
         */
        export interface IPAddressPoolSpecServiceAllocationPatch {
            /**
             * NamespaceSelectors list of label selectors to select namespace(s) for ip pool,
             * an alternative to using namespace list.
             */
            namespaceSelectors: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationNamespaceSelectorsPatch[]
            /**
             * Namespaces list of namespace(s) on which ip pool can be attached.
             */
            namespaces: string[]
            /**
             * Priority priority given for ip pool while ip allocation on a service.
             */
            priority: number
            /**
             * ServiceSelectors list of label selector to select service(s) for which ip pool
             * can be used for ip allocation.
             */
            serviceSelectors: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationServiceSelectorsPatch[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface IPAddressPoolSpecServiceAllocationServiceSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationServiceSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IPAddressPoolSpecServiceAllocationServiceSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IPAddressPoolSpecServiceAllocationServiceSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface IPAddressPoolSpecServiceAllocationServiceSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.IPAddressPoolSpecServiceAllocationServiceSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * IPAddressPoolStatus defines the observed state of IPAddressPool.
         */
        export interface IPAddressPoolStatus {
            /**
             * AssignedIPv4 is the number of assigned IPv4 addresses.
             */
            assignedIPv4: number
            /**
             * AssignedIPv6 is the number of assigned IPv6 addresses.
             */
            assignedIPv6: number
            /**
             * AvailableIPv4 is the number of available IPv4 addresses.
             */
            availableIPv4: number
            /**
             * AvailableIPv6 is the number of available IPv6 addresses.
             */
            availableIPv6: number
        }

        /**
         * IPAddressPoolStatus defines the observed state of IPAddressPool.
         */
        export interface IPAddressPoolStatusPatch {
            /**
             * AssignedIPv4 is the number of assigned IPv4 addresses.
             */
            assignedIPv4: number
            /**
             * AssignedIPv6 is the number of assigned IPv6 addresses.
             */
            assignedIPv6: number
            /**
             * AvailableIPv4 is the number of available IPv4 addresses.
             */
            availableIPv4: number
            /**
             * AvailableIPv6 is the number of available IPv6 addresses.
             */
            availableIPv6: number
        }

        /**
         * L2Advertisement allows to advertise the LoadBalancer IPs provided
         * by the selected pools via L2.
         */
        export interface L2Advertisement {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'L2Advertisement'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta1.L2AdvertisementSpec
            /**
             * L2AdvertisementStatus defines the observed state of L2Advertisement.
             */
            status: { [key: string]: string }
        }

        /**
         * L2AdvertisementSpec defines the desired state of L2Advertisement.
         */
        export interface L2AdvertisementSpec {
            /**
             * A list of interfaces to announce from. The LB IP will be announced only from these interfaces.
             * If the field is not set, we advertise from all the interfaces on the host.
             */
            interfaces: string[]
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement.
             * If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors: outputs.metallb.v1beta1.L2AdvertisementSpecIpAddressPoolSelectors[]
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools: string[]
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors: outputs.metallb.v1beta1.L2AdvertisementSpecNodeSelectors[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface L2AdvertisementSpecIpAddressPoolSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.L2AdvertisementSpecIpAddressPoolSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface L2AdvertisementSpecIpAddressPoolSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface L2AdvertisementSpecIpAddressPoolSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface L2AdvertisementSpecIpAddressPoolSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.L2AdvertisementSpecIpAddressPoolSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface L2AdvertisementSpecNodeSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.L2AdvertisementSpecNodeSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface L2AdvertisementSpecNodeSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface L2AdvertisementSpecNodeSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface L2AdvertisementSpecNodeSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta1.L2AdvertisementSpecNodeSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * L2AdvertisementSpec defines the desired state of L2Advertisement.
         */
        export interface L2AdvertisementSpecPatch {
            /**
             * A list of interfaces to announce from. The LB IP will be announced only from these interfaces.
             * If the field is not set, we advertise from all the interfaces on the host.
             */
            interfaces: string[]
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement.
             * If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors: outputs.metallb.v1beta1.L2AdvertisementSpecIpAddressPoolSelectorsPatch[]
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools: string[]
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors: outputs.metallb.v1beta1.L2AdvertisementSpecNodeSelectorsPatch[]
        }

        /**
         * ServiceBGPStatus exposes the BGP peers a service is configured to be advertised to, per relevant node.
         */
        export interface ServiceBGPStatus {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'ServiceBGPStatus'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            /**
             * ServiceBGPStatusSpec defines the desired state of ServiceBGPStatus.
             */
            spec: { [key: string]: string }
            status: outputs.metallb.v1beta1.ServiceBGPStatusStatus
        }

        /**
         * MetalLBServiceBGPStatus defines the observed state of ServiceBGPStatus.
         */
        export interface ServiceBGPStatusStatus {
            /**
             * Node indicates the node announcing the service.
             */
            node: string
            /**
             * Peers indicate the BGP peers for which the service is configured to be advertised to.
             * The service being actually advertised to a given peer depends on the session state and is not indicated here.
             */
            peers: string[]
            /**
             * ServiceName indicates the service this status represents.
             */
            serviceName: string
            /**
             * ServiceNamespace indicates the namespace of the service.
             */
            serviceNamespace: string
        }

        /**
         * MetalLBServiceBGPStatus defines the observed state of ServiceBGPStatus.
         */
        export interface ServiceBGPStatusStatusPatch {
            /**
             * Node indicates the node announcing the service.
             */
            node: string
            /**
             * Peers indicate the BGP peers for which the service is configured to be advertised to.
             * The service being actually advertised to a given peer depends on the session state and is not indicated here.
             */
            peers: string[]
            /**
             * ServiceName indicates the service this status represents.
             */
            serviceName: string
            /**
             * ServiceNamespace indicates the namespace of the service.
             */
            serviceNamespace: string
        }

        /**
         * ServiceL2Status reveals the actual traffic status of loadbalancer services in layer2 mode.
         */
        export interface ServiceL2Status {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta1'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'ServiceL2Status'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            /**
             * ServiceL2StatusSpec defines the desired state of ServiceL2Status.
             */
            spec: { [key: string]: string }
            status: outputs.metallb.v1beta1.ServiceL2StatusStatus
        }

        /**
         * MetalLBServiceL2Status defines the observed state of ServiceL2Status.
         */
        export interface ServiceL2StatusStatus {
            /**
             * Interfaces indicates the interfaces that receive the directed traffic
             */
            interfaces: outputs.metallb.v1beta1.ServiceL2StatusStatusInterfaces[]
            /**
             * Node indicates the node that receives the directed traffic
             */
            node: string
            /**
             * ServiceName indicates the service this status represents
             */
            serviceName: string
            /**
             * ServiceNamespace indicates the namespace of the service
             */
            serviceNamespace: string
        }

        /**
         * InterfaceInfo defines interface info of layer2 announcement.
         */
        export interface ServiceL2StatusStatusInterfaces {
            /**
             * Name the name of network interface card
             */
            name: string
        }

        /**
         * InterfaceInfo defines interface info of layer2 announcement.
         */
        export interface ServiceL2StatusStatusInterfacesPatch {
            /**
             * Name the name of network interface card
             */
            name: string
        }

        /**
         * MetalLBServiceL2Status defines the observed state of ServiceL2Status.
         */
        export interface ServiceL2StatusStatusPatch {
            /**
             * Interfaces indicates the interfaces that receive the directed traffic
             */
            interfaces: outputs.metallb.v1beta1.ServiceL2StatusStatusInterfacesPatch[]
            /**
             * Node indicates the node that receives the directed traffic
             */
            node: string
            /**
             * ServiceName indicates the service this status represents
             */
            serviceName: string
            /**
             * ServiceNamespace indicates the namespace of the service
             */
            serviceNamespace: string
        }
    }

    export namespace v1beta2 {
        /**
         * BGPPeer is the Schema for the peers API.
         */
        export interface BGPPeer {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: 'metallb.io/v1beta2'
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: 'BGPPeer'
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta
            spec: outputs.metallb.v1beta2.BGPPeerSpec
            /**
             * BGPPeerStatus defines the observed state of Peer.
             */
            status: { [key: string]: string }
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpec {
            /**
             * The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
             */
            bfdProfile: string
            /**
             * Requested BGP connect time, controls how long BGP waits between connection attempts to a neighbor.
             */
            connectTime: string
            /**
             * To set if we want to disable MP BGP that will separate IPv4 and IPv6 route exchanges into distinct BGP sessions.
             * Deprecated: DisableMP is deprecated in favor of dualStackAddressFamily.
             */
            disableMP: boolean
            /**
             * To set if we want to enable the neighbor not only for the ipfamily related to its session,
             * but also the other one. This allows to advertise/receive IPv4 prefixes over IPv6 sessions and vice versa.
             */
            dualStackAddressFamily: boolean
            /**
             * DynamicASN detects the AS number to use for the remote end of the session
             * without explicitly setting it via the ASN field. Limited to:
             * internal - if the neighbor's ASN is different than MyASN connection is denied.
             * external - if the neighbor's ASN is the same as MyASN the connection is denied.
             * ASN and DynamicASN are mutually exclusive and one of them must be specified.
             */
            dynamicASN: string
            /**
             * To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
             */
            ebgpMultiHop: boolean
            /**
             * EnableGracefulRestart allows BGP peer to continue to forward data packets
             * along known routes while the routing protocol information is being
             * restored. This field is immutable because it requires restart of the BGP
             * session. Supported for FRR mode only.
             */
            enableGracefulRestart: boolean
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime: string
            /**
             * Interface is the node interface over which the unnumbered BGP peering will
             * be established. No API validation takes place as that string value
             * represents an interface name on the host and if user provides an invalid
             * value, only the actual BGP session will not be established.
             * Address and Interface are mutually exclusive and one of them must be specified.
             */
            interface: string
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime: string
            /**
             * AS number to use for the local end of the session.
             */
            myASN: number
            /**
             * Only connect to this peer on nodes that match one of these
             * selectors.
             */
            nodeSelectors: outputs.metallb.v1beta2.BGPPeerSpecNodeSelectors[]
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password: string
            passwordSecret: outputs.metallb.v1beta2.BGPPeerSpecPasswordSecret
            /**
             * AS number to expect from the remote end of the session.
             * ASN and DynamicASN are mutually exclusive and one of them must be specified.
             */
            peerASN: number
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: string
            /**
             * Port to dial when establishing the session.
             */
            peerPort: number
            /**
             * BGP router ID to advertise to the peer
             */
            routerID: string
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress: string
            /**
             * To set if we want to peer with the BGPPeer using an interface belonging to
             * a host vrf
             */
            vrf: string
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface BGPPeerSpecNodeSelectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta2.BGPPeerSpecNodeSelectorsMatchExpressions[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BGPPeerSpecNodeSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BGPPeerSpecNodeSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[]
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and
         * matchExpressions are ANDed. An empty label selector matches all objects. A null
         * label selector matches no objects.
         */
        export interface BGPPeerSpecNodeSelectorsPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.metallb.v1beta2.BGPPeerSpecNodeSelectorsMatchExpressionsPatch[]
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: { [key: string]: string }
        }

        /**
         * passwordSecret is name of the authentication secret for BGP Peer.
         * the secret must be of type "kubernetes.io/basic-auth", and created in the
         * same namespace as the MetalLB deployment. The password is stored in the
         * secret as the key "password".
         */
        export interface BGPPeerSpecPasswordSecret {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name: string
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace: string
        }

        /**
         * passwordSecret is name of the authentication secret for BGP Peer.
         * the secret must be of type "kubernetes.io/basic-auth", and created in the
         * same namespace as the MetalLB deployment. The password is stored in the
         * secret as the key "password".
         */
        export interface BGPPeerSpecPasswordSecretPatch {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name: string
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace: string
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpecPatch {
            /**
             * The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
             */
            bfdProfile: string
            /**
             * Requested BGP connect time, controls how long BGP waits between connection attempts to a neighbor.
             */
            connectTime: string
            /**
             * To set if we want to disable MP BGP that will separate IPv4 and IPv6 route exchanges into distinct BGP sessions.
             * Deprecated: DisableMP is deprecated in favor of dualStackAddressFamily.
             */
            disableMP: boolean
            /**
             * To set if we want to enable the neighbor not only for the ipfamily related to its session,
             * but also the other one. This allows to advertise/receive IPv4 prefixes over IPv6 sessions and vice versa.
             */
            dualStackAddressFamily: boolean
            /**
             * DynamicASN detects the AS number to use for the remote end of the session
             * without explicitly setting it via the ASN field. Limited to:
             * internal - if the neighbor's ASN is different than MyASN connection is denied.
             * external - if the neighbor's ASN is the same as MyASN the connection is denied.
             * ASN and DynamicASN are mutually exclusive and one of them must be specified.
             */
            dynamicASN: string
            /**
             * To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
             */
            ebgpMultiHop: boolean
            /**
             * EnableGracefulRestart allows BGP peer to continue to forward data packets
             * along known routes while the routing protocol information is being
             * restored. This field is immutable because it requires restart of the BGP
             * session. Supported for FRR mode only.
             */
            enableGracefulRestart: boolean
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime: string
            /**
             * Interface is the node interface over which the unnumbered BGP peering will
             * be established. No API validation takes place as that string value
             * represents an interface name on the host and if user provides an invalid
             * value, only the actual BGP session will not be established.
             * Address and Interface are mutually exclusive and one of them must be specified.
             */
            interface: string
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime: string
            /**
             * AS number to use for the local end of the session.
             */
            myASN: number
            /**
             * Only connect to this peer on nodes that match one of these
             * selectors.
             */
            nodeSelectors: outputs.metallb.v1beta2.BGPPeerSpecNodeSelectorsPatch[]
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password: string
            passwordSecret: outputs.metallb.v1beta2.BGPPeerSpecPasswordSecretPatch
            /**
             * AS number to expect from the remote end of the session.
             * ASN and DynamicASN are mutually exclusive and one of them must be specified.
             */
            peerASN: number
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: string
            /**
             * Port to dial when establishing the session.
             */
            peerPort: number
            /**
             * BGP router ID to advertise to the peer
             */
            routerID: string
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress: string
            /**
             * To set if we want to peer with the BGPPeer using an interface belonging to
             * a host vrf
             */
            vrf: string
        }
    }
}
