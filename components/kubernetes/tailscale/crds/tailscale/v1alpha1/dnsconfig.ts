// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from '@pulumi/pulumi'
import * as inputs from '../../types/input'
import * as outputs from '../../types/output'
import * as utilities from '../../utilities'

import { ObjectMeta } from '../../meta/v1'

/**
 * DNSConfig can be deployed to cluster to make a subset of Tailscale MagicDNS
 * names resolvable by cluster workloads. Use this if: A) you need to refer to
 * tailnet services, exposed to cluster via Tailscale Kubernetes operator egress
 * proxies by the MagicDNS names of those tailnet services (usually because the
 * services run over HTTPS)
 * B) you have exposed a cluster workload to the tailnet using Tailscale Ingress
 * and you also want to refer to the workload from within the cluster over the
 * Ingress's MagicDNS name (usually because you have some callback component
 * that needs to use the same URL as that used by a non-cluster client on
 * tailnet).
 * When a DNSConfig is applied to a cluster, Tailscale Kubernetes operator will
 * deploy a nameserver for ts.net DNS names and automatically populate it with records
 * for any Tailscale egress or Ingress proxies deployed to that cluster.
 * Currently you must manually update your cluster DNS configuration to add the
 * IP address of the deployed nameserver as a ts.net stub nameserver.
 * Instructions for how to do it:
 * https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/#configuration-of-stub-domain-and-upstream-nameserver-using-coredns (for CoreDNS),
 * https://cloud.google.com/kubernetes-engine/docs/how-to/kube-dns (for kube-dns).
 * Tailscale Kubernetes operator will write the address of a Service fronting
 * the nameserver to dsnconfig.status.nameserver.ip.
 * DNSConfig is a singleton - you must not create more than one.
 * NB: if you want cluster workloads to be able to refer to Tailscale Ingress
 * using its MagicDNS name, you must also annotate the Ingress resource with
 * tailscale.com/experimental-forward-cluster-traffic-via-ingress annotation to
 * ensure that the proxy created for the Ingress listens on its Pod IP address.
 * NB: Clusters where Pods get assigned IPv6 addresses only are currently not supported.
 */
export class DNSConfig extends pulumi.CustomResource {
    /**
     * Get an existing DNSConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(
        name: string,
        id: pulumi.Input<pulumi.ID>,
        opts?: pulumi.CustomResourceOptions,
    ): DNSConfig {
        return new DNSConfig(name, undefined as any, { ...opts, id: id })
    }

    /** @internal */
    public static readonly __pulumiType =
        'kubernetes:tailscale.com/v1alpha1:DNSConfig'

    /**
     * Returns true if the given object is an instance of DNSConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DNSConfig {
        if (obj === undefined || obj === null) {
            return false
        }
        return obj['__pulumiType'] === DNSConfig.__pulumiType
    }

    public readonly apiVersion!: pulumi.Output<
        'tailscale.com/v1alpha1' | undefined
    >
    public readonly kind!: pulumi.Output<'DNSConfig' | undefined>
    public readonly metadata!: pulumi.Output<ObjectMeta | undefined>
    /**
     * Spec describes the desired DNS configuration.
     * More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    public readonly spec!: pulumi.Output<outputs.tailscale.v1alpha1.DNSConfigSpec>
    /**
     * Status describes the status of the DNSConfig. This is set
     * and managed by the Tailscale operator.
     */
    public readonly status!: pulumi.Output<
        outputs.tailscale.v1alpha1.DNSConfigStatus | undefined
    >

    /**
     * Create a DNSConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(
        name: string,
        args?: DNSConfigArgs,
        opts?: pulumi.CustomResourceOptions,
    ) {
        let resourceInputs: pulumi.Inputs = {}
        opts = opts || {}
        if (!opts.id) {
            resourceInputs['apiVersion'] = 'tailscale.com/v1alpha1'
            resourceInputs['kind'] = 'DNSConfig'
            resourceInputs['metadata'] = args ? args.metadata : undefined
            resourceInputs['spec'] = args ? args.spec : undefined
            resourceInputs['status'] = args ? args.status : undefined
        } else {
            resourceInputs['apiVersion'] = undefined /*out*/
            resourceInputs['kind'] = undefined /*out*/
            resourceInputs['metadata'] = undefined /*out*/
            resourceInputs['spec'] = undefined /*out*/
            resourceInputs['status'] = undefined /*out*/
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts)
        super(DNSConfig.__pulumiType, name, resourceInputs, opts)
    }
}

/**
 * The set of arguments for constructing a DNSConfig resource.
 */
export interface DNSConfigArgs {
    apiVersion?: pulumi.Input<'tailscale.com/v1alpha1'>
    kind?: pulumi.Input<'DNSConfig'>
    metadata?: pulumi.Input<ObjectMeta>
    /**
     * Spec describes the desired DNS configuration.
     * More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    spec?: pulumi.Input<inputs.tailscale.v1alpha1.DNSConfigSpecArgs>
    /**
     * Status describes the status of the DNSConfig. This is set
     * and managed by the Tailscale operator.
     */
    status?: pulumi.Input<inputs.tailscale.v1alpha1.DNSConfigStatusArgs>
}
